<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kt.aivle.board.mapper.BoardMapper">

    <select id="getListBoard" resultType="kt.aivle.board.model.Board">
        SELECT
        board_sn,
        user_name AS userName,
        title,
        content,
        DATE_FORMAT(b.created_dt, '%Y-%m-%d %H:%i') AS createdDt
        FROM
        board b
        JOIN
        user u ON b.user_sn = u.user_sn
        WHERE
        board_yn = 'Y'
        ORDER BY
        b.created_dt DESC
    </select>

    <select id="getListGongo" resultType="kt.aivle.board.model.Gongo">
        SELECT
            gongo_sn,
            gongo_name,
            content,
            gongo_type,
            schedule_start_dt,
            schedule_end_dt,
            document_start_dt,
            document_end_dt,
            use_yn,
            DATE_FORMAT(created_dt, '%Y-%m-%d %H:%i') AS createdDt,
            updated_dt
        FROM
            gongo
        WHERE
            use_yn = 'Y'
        ORDER BY
            gongo_sn DESC
    </select>

    <!--게시글 등록-->
    <insert id="saveboard" parameterType="kt.aivle.board.model.Board" useGeneratedKeys="true" keyProperty="boardSn">
        INSERT INTO board (
        user_sn,
        title,
        content,
        board_yn,
        created_dt,
        updated_dt
        )
        VALUES (
        #{userSn},
        #{title},
        #{content},
        'Y',
        NOW(),
        NOW()
        )
    </insert>

    <!--이미지 서버 등록-->
    <insert
            id="regImg"
            parameterType="kt.aivle.board.model.ImgEntity"
    >
        /* kt.aivle.board.BoardMapper.regImg*/
        INSERT INTO img (
        ref_table,
        ref_sn,
        path,
        file_name,
        ori_file_name,
        ext,
        use_yn,
        created_dt
        ) VALUES (
        #{refTable}
        , #{refSn}
        , #{path}
        , #{fileName}
        , #{oriFileName}
        , #{ext}
        , 'Y'
        , NOW()
        );
    </insert>

    <!-- 이미지 테이블에서 게시판에 해당하는 이미지 찾기-->
    <select id="findImagesByBoardSn" resultType="kt.aivle.board.model.ImgEntity">
        SELECT *
        FROM img
        WHERE ref_table = 'board' AND ref_sn = #{boardSn} AND use_yn = 'Y'
    </select>
    
    <select id="getPostByBoardSn" resultType="kt.aivle.board.model.Board">
        SELECT
            board_sn,
            user_name AS userName,
            b.user_sn,
            title,
            content,
            DATE_FORMAT(b.created_dt, '%Y-%m-%d %H:%i') AS createdDt
        FROM
        board b
        JOIN
        user u ON b.user_sn = u.user_sn
        WHERE
        board_yn = 'Y' AND board_sn = #{boardSn}
    </select>

    <!-- 게시글 소프트 삭제 기능(실제로는 n으로 바꾸기) -->
    <update id="softDeletePost">
        UPDATE board
        SET board_yn = 'N'
        WHERE board_sn = #{boardSn}
    </update>

    <!-- 게시글의 이미지 소프트 삭제 기능(실제로는 n으로 바꾸기) -->
    <update id="softDeleteImg">
        UPDATE img
        SET use_yn = 'N'
        WHERE ref_sn = #{boardSn}
    </update>

    <!-- 이미지 소프트 삭제 기능(실제로는 n으로 바꾸기) -->
    <update id="deleteImage">
        UPDATE img
        SET use_yn = 'N'
        WHERE img_sn = #{imgSn}
    </update>

    <!--게시글 수정-->
    <update id="updatePost">
        UPDATE board
        SET title = #{title}, content = #{content}, updated_dt = NOW()
        WHERE board_sn = #{boardSn}
    </update>

    <!-- pdf db 불러오기-->
    <select id="getPdfFileById" resultType="kt.aivle.board.model.PdfFileEntity">
        SELECT *
        FROM pdf
        WHERE ref_table = 'gongo' AND pdf_sn = #{pdfSn} AND use_yn = 'Y'
    </select>

    <!--공고게시글 등록-->
    <insert id="saveGongo" parameterType="kt.aivle.board.model.Gongo" keyProperty="gongoSn">
        INSERT INTO gongo (
        gongo_name,
        content,
        gongo_type,
        schedule_start_dt,
        schedule_end_dt,
        use_yn,
        created_dt
        )
        VALUES (
        #{gongoName},
        #{content},
        #{gongoType},
        #{scheduleStartDt},
        #{scheduleEndDt},
        'Y',
        NOW()
        )
    </insert>

    <!--pdf 서버 등록-->
    <insert
            id="regPdf"
            parameterType="kt.aivle.board.model.PdfFileEntity"
    >
        /* kt.aivle.board.BoardMapper.regPdf*/
        INSERT INTO pdf (
        ref_table,
        ref_sn,
        path,
        file_name,
        ori_file_name,
        use_yn,
        created_dt
        ) VALUES (
        #{refTable}
        , #{refSn}
        , #{path}
        , #{fileName}
        , #{oriFileName}
        , 'Y'
        , NOW()
        );
    </insert>

    <select id="getPostByGongoSn" resultType="kt.aivle.board.model.Gongo">
        SELECT
            gongo_name,
            content,
            gongo_type,
            schedule_start_dt,
            schedule_end_dt,
            created_dt
        FROM
        gongo
        WHERE
        use_yn = 'Y' AND gongo_sn = #{gongoSn}
    </select>

    <!-- 이미지 테이블에서 게시판에 해당하는 이미지 찾기-->
    <select id="findPdfsByGongoSn" resultType="kt.aivle.board.model.PdfFileEntity">
        SELECT *
        FROM pdf
        WHERE ref_table = 'gongo' AND ref_sn = #{gongoSn} AND use_yn = 'Y'
    </select>

    <!-- pdf db 불러오기-->
    <select id="getPdfPathById" resultType="String">
        SELECT
        CONCAT(path, file_name) AS result
        FROM pdf
        WHERE ref_table = 'gongo' AND pdf_sn = #{pdfSn} AND use_yn = 'Y'
    </select>

    <!-- 공고게시글 소프트 삭제 기능(실제로는 n으로 바꾸기) -->
    <update id="softDeleteGongo">
        UPDATE gongo
        SET use_yn = 'N'
        WHERE gongo_sn = #{gongoSn}
    </update>

    <!-- 공고게시글 이미지 소프트 삭제 기능(실제로는 n으로 바꾸기) -->
    <update id="softDeletePdf">
        UPDATE pdf
        SET use_yn = 'N'
        WHERE ref_sn = #{gongoSn}
    </update>

    <!-- 이미지 소프트 삭제 기능(실제로는 n으로 바꾸기) -->
    <update id="deletePdf">
        UPDATE pdf
        SET use_yn = 'N'
        WHERE pdf_sn = #{pdfSn}
    </update>
</mapper>
